RANGE { START $E000; END $E6B5; TYPE BYTETABLE; };
RANGE { START $F93E; END $FFF9; TYPE BYTETABLE; };
RANGE { START $FFFA; END $FFFF; TYPE ADDRTABLE; };
LABEL { ADDR $0000; NAME "ppuCtrl"; };
LABEL { ADDR $0001; NAME "ppuMaskMaybe"; };
LABEL { ADDR $0002; NAME "checkIfBOrAPressedLastFrame"; };
LABEL { ADDR $0003; NAME "tmpAddr"; SIZE 2; };
LABEL { ADDR $0005; NAME "nametablePayloadAddr"; SIZE 2; };
LABEL { ADDR $0009; NAME "generalForLoopLimit"; };
LABEL { ADDR $000A; NAME "prgBankMaybe"; };
LABEL { ADDR $000B; NAME "prgVideoDataPtr"; SIZE 2; };
LABEL { ADDR $000E; NAME "unknownVramAddress"; SIZE 2; };
LABEL { ADDR $0010; NAME "maybePpuTileBuffer"; SIZE 32; };
LABEL { ADDR $0030; NAME "rawNametableBufferPtr"; SIZE 2; };
LABEL { ADDR $0032; NAME "nametableToRender"; SIZE 2; };
LABEL { ADDR $0034; NAME "skipRenderAndAudioThisFrame"; COMMENT "bit0 - set if left pressed\n; bit7 - set if b pressed"; };
LABEL { ADDR $0035; NAME "movieFrameCounter"; };
LABEL { ADDR $0036; NAME "nametablePageToWriteMaybe"; };
LABEL { ADDR $0037; NAME "maybeCounterForFrameUpdate"; };
LABEL { ADDR $0038; NAME "videoOpcodeFlags"; };
LABEL { ADDR $0039; NAME "maybeVideoOpcodeTmp"; };
LABEL { ADDR $003A; NAME "probablyVideoDataBuffer"; SIZE 4; };
LABEL { ADDR $003E; NAME "forLoopTmp"; };
LABEL { ADDR $003F; NAME "unknownBitSequence"; };
LABEL { ADDR $0040; NAME "bitSequenceTblIndexMaybe"; };
LABEL { ADDR $0041; NAME "unknownCounterMaybe2"; };
LABEL { ADDR $0042; NAME "dmcConflictTimer"; COMMENT "since ppudata reads when a sample is playing can be unreliable"; };
LABEL { ADDR $0043; NAME "nextAudioBank"; };
LABEL { ADDR $0044; NAME "shadowIndex"; };
LABEL { ADDR $0045; NAME "lightIndex"; };
LABEL { ADDR $0046; NAME "imglagIndex"; };
LABEL { ADDR $0047; NAME "dotPattern"; COMMENT "seems to be multiples of 4 to load banks nicely"; };
LABEL { ADDR $0048; NAME "pauseMenuActive"; COMMENT "0=no, 1=yes"; };
LABEL { ADDR $0049; NAME "pauseMenuRow"; };
LABEL { ADDR $004B; NAME "spriteXPos"; };
LABEL { ADDR $004C; NAME "spriteYPos"; };
LABEL { ADDR $004D; NAME "spriteAttr"; };
LABEL { ADDR $004E; NAME "paletteBg"; };
LABEL { ADDR $004F; NAME "paletteBg1"; SIZE 4; };
LABEL { ADDR $0053; NAME "paletteBg2"; SIZE 4; };
LABEL { ADDR $0057; NAME "paletteBg3"; SIZE 4; };
LABEL { ADDR $005B; NAME "paletteBg4"; SIZE 4; };
LABEL { ADDR $005F; NAME "paletteSpr1"; SIZE 4; };
LABEL { ADDR $0063; NAME "paletteSpr2"; SIZE 4; };
LABEL { ADDR $0067; NAME "paletteSpr3"; SIZE 4; };
LABEL { ADDR $006B; NAME "paletteSpr4"; SIZE 3; };
LABEL { ADDR $006E; NAME "player1_heldButtons"; };
LABEL { ADDR $006F; NAME "player1_oldHeldButtons"; };
LABEL { ADDR $0070; NAME "player1_newButtons"; };
LABEL { ADDR $0072; NAME "buttonDebounce"; SIZE 3; };
LABEL { ADDR $0075; NAME "player1_dpad"; };
LABEL { ADDR $0076; NAME "pauseMenuDas"; };
LABEL { ADDR $0077; NAME "unusedSpriteCounter"; };
LABEL { ADDR $0078; NAME "unusedOamIndexCounter"; };
LABEL { ADDR $007D; NAME "channelScriptPtr"; SIZE 10; };
LABEL { ADDR $0087; NAME "currentApuChannel"; };
LABEL { ADDR $0088; NAME "currentApuChannelx2"; };
LABEL { ADDR $0089; NAME "currentApuChannelOffset"; };
LABEL { ADDR $008E; NAME "audioAddrTmp"; SIZE 2; COMMENT "exists purely as a vessel for indirect addressing"; };
LABEL { ADDR $01F6; NAME "payloadStart"; };
LABEL { ADDR $06F6; NAME "payloadEnd"; };
LABEL { ADDR $0700; NAME "oamStaging"; SIZE 256; };
LABEL { ADDR $8000; NAME "sq0script1"; SIZE 7520; };
LABEL { ADDR $9D60; NAME "sq1Script1"; SIZE 658; };
LABEL { ADDR $B1CC; NAME "triScript1"; SIZE 2550; };
LABEL { ADDR $BBC2; NAME "noiseScript1"; SIZE 782; };
LABEL { ADDR $C000; NAME "dmcDrumSample"; SIZE 289; };
LABEL { ADDR $C121; NAME "initChannelScriptPtr"; SIZE 10; };
LABEL { ADDR $C12B; NAME "initChannelScriptBank"; SIZE 5; COMMENT "stores twice the bank number for readability"; };
LABEL { ADDR $C130; NAME "sq0ScriptStart"; SIZE 4; };
LABEL { ADDR $DAD4; NAME "dmcScript"; SIZE 912; };
LABEL { ADDR $E000; NAME "basePaletteBg"; };
LABEL { ADDR $E001; NAME "basePaletteBg1"; SIZE 4; };
LABEL { ADDR $E005; NAME "basePaletteBg2"; SIZE 4; };
LABEL { ADDR $E009; NAME "basePaletteBg3"; SIZE 4; };
LABEL { ADDR $E00D; NAME "basePaletteBg4"; SIZE 4; };
LABEL { ADDR $E011; NAME "basePaletteSpr1"; SIZE 4; };
LABEL { ADDR $E015; NAME "basePaletteSpr2"; SIZE 4; };
LABEL { ADDR $E019; NAME "basePaletteSpr3"; SIZE 4; };
LABEL { ADDR $E01D; NAME "basePaletteSpr4"; SIZE 3; };
LABEL { ADDR $E020; NAME "unknownAudioPtrTbl"; SIZE 10; };
LABEL { ADDR $E036; NAME "unknownAudioAddrTbl4"; SIZE 10; };
LABEL { ADDR $E04E; NAME "unknownMaybeVolumeData2"; SIZE 2; };
LABEL { ADDR $E052; NAME "unknownMaybeVolumeData1"; SIZE 9; };
LABEL { ADDR $E05C; NAME "unknownMaybeVolumeData3"; SIZE 2; };
LABEL { ADDR $E062; NAME "maybeEnvelopeAddrTbl"; SIZE 4; };
LABEL { ADDR $E11E; NAME "maybeEnvelopeAddrTbl2"; SIZE 10; };
LABEL { ADDR $E35F; NAME "audioAddrTblF8"; SIZE 10; };
LABEL { ADDR $E4FC; NAME "audioAddrTblF7"; SIZE 2; };
LABEL { ADDR $E6B2; NAME "dmcDrumInitData"; SIZE 4; COMMENT "play dmc sample at C000 for 193 bytes"; };
LABEL { ADDR $E6B6; NAME "initGraphicsMaybe"; };
LABEL { ADDR $E6BD; NAME "@setAttributeTableTo3"; };
LABEL { ADDR $E6C3; NAME ""; COMMENT "swap $1000-$13FF"; };
LABEL { ADDR $E6CD; NAME ""; COMMENT "swap $1400-17FF"; };
LABEL { ADDR $E6E8; NAME "@initBasePalette"; };
LABEL { ADDR $E6F3; NAME "resetMemoryToMovieStart"; };
LABEL { ADDR $E708; NAME "@copyPayloadTemplate"; };
LABEL { ADDR $E70A; NAME "@copyPayloadBlock"; };
LABEL { ADDR $E728; NAME "@copyPayloadEnd"; };
LABEL { ADDR $E76F; NAME "@copyNametableToPpuData"; };
LABEL { ADDR $E788; NAME "prepareFrame"; };
LABEL { ADDR $E79C; NAME "@dontRenderNametableProbably"; };
LABEL { ADDR $E7C7; NAME "handleNormalInput"; COMMENT "start with check for a"; };
LABEL { ADDR $E7DF; NAME "@bPressedSomeTimeAgo"; };
LABEL { ADDR $E7E3; NAME "@checkIfBPressed"; };
LABEL { ADDR $E7F8; NAME "@branchIfBNotPressedBefore"; };
LABEL { ADDR $E80A; NAME "@checkIfLeftPressed"; };
LABEL { ADDR $E81E; NAME "@checkIfStartPressed"; };
LABEL { ADDR $E836; NAME "@startNotPressed"; };
LABEL { ADDR $E841; NAME ""; COMMENT "why is this necessary?"; };
LABEL { ADDR $E845; NAME ""; COMMENT "makes sure the nametable being shown is not the one being updated"; };
LABEL { ADDR $E85F; NAME "@skipAudioAndRenderUpdate"; };
LABEL { ADDR $E864; NAME "waitForVsyncThenSetPpu"; };
LABEL { ADDR $E878; NAME "finishIngameReset"; };
LABEL { ADDR $E87C; NAME "@waitForVsync"; };
LABEL { ADDR $E88F; NAME "setupPauseMenu"; };
LABEL { ADDR $E89F; NAME "pauseMenu"; };
LABEL { ADDR $E8B7; NAME "@startNotPressed_1"; };
LABEL { ADDR $E8C8; NAME "@topOfMenu"; };
LABEL { ADDR $E8CB; NAME "@upNotPressed"; };
LABEL { ADDR $E8DA; NAME "@bottomOfMenu"; };
LABEL { ADDR $E8DC; NAME "@downNotPressed"; };
LABEL { ADDR $E8E2; NAME ""; COMMENT "sets deselected row to black outline"; };
LABEL { ADDR $E8EB; NAME ""; COMMENT "sets newly selected row to red outline"; };
LABEL { ADDR $E8F4; NAME "@bNotPressed_1"; };
LABEL { ADDR $E902; NAME "@notMinColorIndex"; };
LABEL { ADDR $E90E; NAME "@leftNotPressed"; };
LABEL { ADDR $E91E; NAME "@notMaxColorIndex"; };
LABEL { ADDR $E92A; NAME "@rightNotPressed"; };
LABEL { ADDR $E99C; NAME "maybeFetchSomePpuData"; };
LABEL { ADDR $E9A5; NAME "@actuallyFetch"; };
LABEL { ADDR $E9B7; NAME "@readPpuByte"; };
LABEL { ADDR $E9C7; NAME "@ret_7"; };
LABEL { ADDR $E9C8; NAME "probablyImportantVideoEntryPt"; };
LABEL { ADDR $E9D0; NAME "readPpuTileBuffer"; };
LABEL { ADDR $E9FC; NAME ""; COMMENT "swap $1800-$1BFF"; };
LABEL { ADDR $EA04; NAME ""; COMMENT "swap $1C00-$1FFF"; };
LABEL { ADDR $EA0D; NAME "@waitForDmcToFinish"; };
LABEL { ADDR $EA26; NAME "processVideoScript"; };
LABEL { ADDR $EA37; NAME "@branchIfNametablePageToWriteIsNotStart"; };
LABEL { ADDR $EA4B; NAME "videoScriptMode1"; };
LABEL { ADDR $EA55; NAME "@notStartOfNametable"; };
LABEL { ADDR $EA56; NAME "maybeCopyEntireNametable"; };
LABEL { ADDR $EA62; NAME "@pageDoesNotHaveAttributeData"; };
LABEL { ADDR $EA68; NAME "@copyToNametableBuffer"; };
LABEL { ADDR $EA75; NAME "videoScriptMode3"; };
LABEL { ADDR $EA7D; NAME "@unknownLoop1"; };
LABEL { ADDR $EA89; NAME "@evenBiggerLoop"; };
LABEL { ADDR $EA8D; NAME "@unknownLoop2"; };
LABEL { ADDR $EA9A; NAME "@fetchNewBitSequence"; };
LABEL { ADDR $EA9E; NAME "@weirdSelfLoop"; COMMENT "maybe check for encoding error?"; };
LABEL { ADDR $EAAF; NAME "@iterateBitSequence"; };
LABEL { ADDR $EABA; NAME "@dontUpdateByte"; COMMENT "probably for tiles that aren't updated on the next render"; };
LABEL { ADDR $EABF; NAME "@skipUnknownLoop"; };
LABEL { ADDR $EAD1; NAME "@ret_8"; };
LABEL { ADDR $EAD2; NAME "preparePayloadForNextFrame"; COMMENT "low byte of payloadStart+1"; };
LABEL { ADDR $EAD6; NAME ""; COMMENT "high byte of payloadStart"; };
LABEL { ADDR $EADE; NAME "@writePayloadData"; };
LABEL { ADDR $EAE5; NAME ""; COMMENT "since each payload block is 5 bytes"; };
LABEL { ADDR $EAEB; NAME "@notCrossingPage"; };
LABEL { ADDR $EAF2; NAME "@checkForNop"; };
LABEL { ADDR $EAF8; NAME "advancePrgVideoDataPtr"; COMMENT "loops around if necessary"; };
LABEL { ADDR $EB0C; NAME ""; COMMENT "swap $8000-$9FFF"; };
LABEL { ADDR $EB14; NAME "@ret"; };
LABEL { ADDR $EB15; NAME "resetColors"; };
LABEL { ADDR $EB20; NAME "moreInitStuffMaybe"; };
LABEL { ADDR $EB3A; NAME ""; COMMENT "swap $8000-$9FFF"; };
LABEL { ADDR $EB4E; NAME ""; COMMENT "swap $1800-$1BFF"; };
LABEL { ADDR $EB56; NAME ""; COMMENT "swap $1C00-$1FFF"; };
LABEL { ADDR $EB5F; NAME ""; COMMENT "swap $A000-$BFFF"; };
LABEL { ADDR $EB72; NAME "renderDotPattern"; };
LABEL { ADDR $EB74; NAME ""; COMMENT "swap $0000-$07FF"; };
LABEL { ADDR $EB7E; NAME ""; COMMENT "swap $0800-$0FFF"; };
LABEL { ADDR $EB87; NAME "updateBackgroundColorsMaybe"; };
LABEL { ADDR $EBA4; NAME "showAfterimageOnEvenFramesMaybe"; };
LABEL { ADDR $EBC0; NAME "updateSpriteRow"; };
LABEL { ADDR $EBD7; NAME "@stageLetterAndMaybeNumber"; };
LABEL { ADDR $EBD9; NAME ""; COMMENT "apparently unused opcode"; };
LABEL { ADDR $EBDD; NAME ""; COMMENT "next byte is how much space to add"; };
LABEL { ADDR $EBFE; NAME "@actuallyStage"; };
LABEL { ADDR $EC1E; NAME "@ret_6"; };
LABEL { ADDR $EC1F; NAME "initialPayloadMaybe"; SIZE 5; };
LABEL { ADDR $EC27; NAME "pauseMenuPaletteLookup"; SIZE 53; };
LABEL { ADDR $EC5C; NAME "unknownLoByteTbl"; SIZE 3; };
LABEL { ADDR $EC5F; NAME "unknownHiByteTbl"; SIZE 3; };
LABEL { ADDR $EC62; NAME "textDataSHADOWMaybe"; SIZE 10; };
LABEL { ADDR $EC6C; NAME "textDataLIGHTMaybe"; SIZE 9; };
LABEL { ADDR $EC75; NAME "textDataIMGLAGMaybe"; SIZE 10; };
LABEL { ADDR $EC7F; NAME "pauseMenuTextLengthMaybe"; SIZE 3; };
LABEL { ADDR $EC82; NAME "copyPalette"; };
LABEL { ADDR $EC91; NAME "@copyPaletteByte"; };
LABEL { ADDR $EC9C; NAME "clearButtonTmp"; };
LABEL { ADDR $ECA1; NAME "pollInput"; };
LABEL { ADDR $ECC5; NAME "@setButtons"; };
LABEL { ADDR $ECD6; NAME "readController"; };
LABEL { ADDR $ECE1; NAME "@readNextBit"; };
LABEL { ADDR $ECEF; NAME "initPauseMenuDas"; };
LABEL { ADDR $ECF4; NAME "getDpadAndDas"; };
LABEL { ADDR $ED23; NAME "@dpadNotPressed"; };
LABEL { ADDR $ED27; NAME "@resetDas"; };
LABEL { ADDR $ED2B; NAME "@eraseDpadInputsThisFrame"; };
LABEL { ADDR $ED2D; NAME "@setDpad"; };
LABEL { ADDR $ED54; NAME "cleanSpriteStaging"; };
LABEL { ADDR $ED5C; NAME "@moveSpritesOffscreen"; };
LABEL { ADDR $ED66; NAME "updateUnusedSpriteCounters"; };
LABEL { ADDR $ED72; NAME "@wrapSpriteCount"; };
LABEL { ADDR $ED7F; NAME "nextChannel"; };
LABEL { ADDR $ED8A; NAME "initAudio"; COMMENT "roughly number of frames to wait until audio starts"; };
LABEL { ADDR $ED91; NAME ""; COMMENT "enable everything except dmc"; };
LABEL { ADDR $ED96; NAME ""; COMMENT "disabled and shift is 4?"; };
LABEL { ADDR $EDA4; NAME "@initAudioChannel"; };
LABEL { ADDR $EDD3; NAME "@ret_2"; };
LABEL { ADDR $EDD4; NAME "updateAudio"; };
LABEL { ADDR $EDDD; NAME "iterateThroughChannels"; };
LABEL { ADDR $EDE5; NAME "@forEachChannel"; };
LABEL { ADDR $EDF8; NAME "incChannelScriptPtr"; };
LABEL { ADDR $EDFC; NAME "@pageCrossed"; };
LABEL { ADDR $EDFE; NAME "@ret_3"; };
LABEL { ADDR $EDFF; NAME "addAccToChannelScriptPtr"; };
LABEL { ADDR $EE07; NAME "loadAudioScriptBank"; };
LABEL { ADDR $EE0C; NAME ""; COMMENT "swap $A000-$BFFF"; };
LABEL { ADDR $EE15; NAME "audioInstructionA0"; };
LABEL { ADDR $EE28; NAME "@clearUnknownThingy"; };
LABEL { ADDR $EE2D; NAME "@advancePtrByFourBytes"; };
LABEL { ADDR $EE33; NAME "audioInstructionA1"; };
LABEL { ADDR $EE4B; NAME "EEscriptToNewBank"; };
LABEL { ADDR $EE4E; NAME "@readBankAndPointer"; };
LABEL { ADDR $EE64; NAME "maybeSetEnvelopePtr"; };
LABEL { ADDR $EE84; NAME "audioInstructionFB"; };
LABEL { ADDR $EEDC; NAME "audioInstructionFA"; };
LABEL { ADDR $EF01; NAME "audioInstructionF8"; };
LABEL { ADDR $EF33; NAME "audioInstructionF7"; };
LABEL { ADDR $EF65; NAME "audioInstructionF6"; };
LABEL { ADDR $EF84; NAME "audioInstructionF5"; };
LABEL { ADDR $EFA1; NAME "F4SustainPreviousNoteMaybe"; };
LABEL { ADDR $F03C; NAME "bit0SetInAudioPlaybackStatus"; };
LABEL { ADDR $F04E; NAME "maybeGetChannelVol"; };
LABEL { ADDR $F065; NAME "@maybeLoadSecondEnvelope"; };
LABEL { ADDR $F079; NAME "incMaybeEnvelopeAddr"; };
LABEL { ADDR $F081; NAME "@ret_4"; };
LABEL { ADDR $F082; NAME "bit2SetInAudioPlaybackStatus"; };
LABEL { ADDR $F088; NAME ""; COMMENT "and thus bits 4/5 control length counter and constant volume"; };
LABEL { ADDR $F0C1; NAME "@notTriangle"; };
LABEL { ADDR $F0C2; NAME "updateUnknownAudioPtr"; };
LABEL { ADDR $F0D6; NAME "incUnknownAudioAddrTmp1"; };
LABEL { ADDR $F0DE; NAME "@pageNotCrossed"; };
LABEL { ADDR $F0DF; NAME "bit4SetInAudioPlaybackStatus"; };
LABEL { ADDR $F1A4; NAME "bit1SetInAudioPlaybackStatus"; };
LABEL { ADDR $F201; NAME "incUnknownAudioAddrTmp3"; };
LABEL { ADDR $F2C0; NAME "setLotsOfUnknownPtrs"; };
LABEL { ADDR $F32A; NAME "@notDmc"; };
LABEL { ADDR $F332; NAME "indicateSetAllMmio"; };
LABEL { ADDR $F477; NAME "unreferencedCode1"; };
LABEL { ADDR $F48C; NAME "unreferencedCode2"; };
LABEL { ADDR $F4E5; NAME "checkForChannelUpdate"; };
LABEL { ADDR $F4F0; NAME "updateChannel"; };
LABEL { ADDR $F508; NAME "@dontSetAllMMIO"; };
LABEL { ADDR $F509; NAME "checkIfSilent"; };
LABEL { ADDR $F511; NAME "@notSilent"; };
LABEL { ADDR $F51B; NAME "@checkBit0"; };
LABEL { ADDR $F525; NAME "@checkBit4"; };
LABEL { ADDR $F52F; NAME "@checkBit1"; };
LABEL { ADDR $F53C; NAME "@checkBit3"; };
LABEL { ADDR $F559; NAME "@bit3NotSet"; };
LABEL { ADDR $F55A; NAME "determineChannelPitch"; };
LABEL { ADDR $F57F; NAME "@adjustOctaveDown"; };
LABEL { ADDR $F588; NAME "@correctOctaveAlready"; };
LABEL { ADDR $F58C; NAME "setNoisePeriod"; };
LABEL { ADDR $F59B; NAME "maybeSetAllChannelMMIO"; };
LABEL { ADDR $F5BF; NAME "@potentiallyNotUpdatePitchHi"; };
LABEL { ADDR $F5CD; NAME "@ret_5"; };
LABEL { ADDR $F5CE; NAME "processApuChannelInstruction"; };
LABEL { ADDR $F5E2; NAME "@checkIfA1"; };
LABEL { ADDR $F5EC; NAME "@checkIfEE"; };
LABEL { ADDR $F5F6; NAME "@checkIfF0"; };
LABEL { ADDR $F60D; NAME "@checkIfE9"; };
LABEL { ADDR $F61F; NAME "@checkIfE8"; };
LABEL { ADDR $F635; NAME "@clearBit1"; };
LABEL { ADDR $F63D; NAME "@finishE8"; };
LABEL { ADDR $F643; NAME "@checkIfE7"; };
LABEL { ADDR $F655; NAME "@checkIfFE"; };
LABEL { ADDR $F664; NAME ""; COMMENT "remove flag 2"; };
LABEL { ADDR $F68E; NAME "@alsoNotConstantVol"; };
LABEL { ADDR $F6AE; NAME "@checkIfFD"; };
LABEL { ADDR $F6DA; NAME "@notConstantVol"; };
LABEL { ADDR $F6E0; NAME "@checkIfFC"; COMMENT "mute channel for duration"; };
LABEL { ADDR $F6EC; NAME ""; COMMENT "get length of wait"; };
LABEL { ADDR $F706; NAME "silenceTriangle"; };
LABEL { ADDR $F70F; NAME "checkIfFB"; };
LABEL { ADDR $F719; NAME "@checkIfFA"; };
LABEL { ADDR $F723; NAME "@checkIfF9"; };
LABEL { ADDR $F737; NAME "@checkIfF8"; };
LABEL { ADDR $F741; NAME "@checkIfF7"; };
LABEL { ADDR $F74B; NAME "@checkIfF6"; };
LABEL { ADDR $F753; NAME "checkIfF5"; };
LABEL { ADDR $F75D; NAME "@checkIfF4"; };
LABEL { ADDR $F765; NAME "notAudioOpcodeMaybe"; COMMENT "first is octave/pitch and second is length"; };
LABEL { ADDR $F790; NAME "pitchTable"; SIZE 32; };
LABEL { ADDR $F7B0; NAME "noisePeriodLookup"; COMMENT "high byte is always 0 so no loop"; };
LABEL { ADDR $F7DA; NAME "processDmc"; };
LABEL { ADDR $F7E4; NAME "@ret_1"; };
LABEL { ADDR $F7E5; NAME "processDmcInstruction"; };
LABEL { ADDR $F7F9; NAME "@checkIfDmcA1"; };
LABEL { ADDR $F803; NAME "@checkIfDmcEE"; };
LABEL { ADDR $F80D; NAME "@checkIfDmcE9"; };
LABEL { ADDR $F81F; NAME "@checkIfDmcFC"; };
LABEL { ADDR $F826; NAME "@checkIfDmcF5"; };
LABEL { ADDR $F830; NAME "@checkIfDmcF4"; };
LABEL { ADDR $F838; NAME "startDmcPlayback"; };
LABEL { ADDR $F84C; NAME "@loadDmc"; };
LABEL { ADDR $F866; NAME "@dontSetDmcLoad"; };
LABEL { ADDR $F876; NAME ""; COMMENT "enable all channels"; };
LABEL { ADDR $F87D; NAME "scheduleDmcTimeout"; };
LABEL { ADDR $F88B; NAME "reset"; };
LABEL { ADDR $F898; NAME "@vSyncWait1"; };
LABEL { ADDR $F89D; NAME "@vSyncWait2"; };
LABEL { ADDR $F8A2; NAME ""; COMMENT "vertical mirroring"; };
LABEL { ADDR $F8A7; NAME ""; COMMENT "enable prg ram"; };
LABEL { ADDR $F8AE; NAME ""; COMMENT "reload irq?"; };
LABEL { ADDR $F8B1; NAME ""; COMMENT "disable irq"; };
LABEL { ADDR $F8B4; NAME "@clearZeroPageAndSram"; };
LABEL { ADDR $F8C9; NAME "@vSyncWait3"; };
LABEL { ADDR $F8CE; NAME ""; COMMENT "enable nmi and using 8x16 sprites"; };
LABEL { ADDR $F8D5; NAME ""; COMMENT "show leftmost pixels"; };
LABEL { ADDR $F8DF; NAME "@waitForNmi"; };
LABEL { ADDR $F8E2; NAME "nmi"; };
LABEL { ADDR $F8EE; NAME "@notStopping"; };
LABEL { ADDR $F8F7; NAME "@gotoPauseMenuSetup"; };
LABEL { ADDR $F8FA; NAME "processInput"; };
LABEL { ADDR $F91C; NAME "@gotoPauseMenu"; };
LABEL { ADDR $F91F; NAME "updateDotPattern"; };
LABEL { ADDR $F930; NAME "@setDotPattern"; };
LABEL { ADDR $F932; NAME "@selectNotPressed"; };
LABEL { ADDR $F937; NAME "@exitNmi"; };
LABEL { ADDR $F93D; NAME "irq"; COMMENT "since irq is never acknowledged we stay here forever until nmi"; };
LABEL { ADDR $6000; NAME "nametableRam"; SIZE 1024; };
LABEL { ADDR $6400; NAME "maybeBitSequenceBuffer"; };
LABEL { ADDR $6500; NAME "maybeEnvelopeAddr"; SIZE 10; };
LABEL { ADDR $650A; NAME "audioAddrF8"; SIZE 10; };
LABEL { ADDR $6514; NAME "unknownAudioPtr"; SIZE 10; };
LABEL { ADDR $651E; NAME "audioAddrF7"; SIZE 10; };
LABEL { ADDR $6550; NAME "unknownNextToLCFlags"; };
LABEL { ADDR $6551; NAME "actualLCFlags"; COMMENT " - low nybble is always 0 so can be used to mute channel\n;  - bits 6/7 store something else, which works because no apu accesses them"; };
LABEL { ADDR $655A; NAME "channelVol"; };
LABEL { ADDR $655B; NAME "unknownAudioThing"; };
LABEL { ADDR $6564; NAME "unknownAndPlaybackFlagsMaybe"; SIZE 10; COMMENT "for second value:\n; byte 0 is probably if channel should be silent\n; byte 1 when we want to set all channel at mmio once"; };
LABEL { ADDR $656E; NAME "maybeEnvelopeAddrIndexAndF8Index"; SIZE 10; };
LABEL { ADDR $6579; NAME "maybeAudioPlaybackStatusFlags"; SIZE 9; COMMENT "bit 0 stores result of $FD, cleared by $FB?\n; bit 1 stores result of $F8\n; bit 2 stores result of $FE\n; bit 3 stores result of $F7\n; bits 4/5 with $FB somehow\n; bit 7 stores result of $FA"; };
LABEL { ADDR $6582; NAME "octaveWithPitchIndexAndNoteLength"; SIZE 10; };
LABEL { ADDR $658C; NAME "channelPitchMmio"; SIZE 10; COMMENT "technically includes length counter register but it's never used"; };
LABEL { ADDR $6597; NAME "channelScriptBank"; SIZE 9; };
LABEL { ADDR $65B4; NAME "unknownButAlwaysZeroProbably"; SIZE 10; };
LABEL { ADDR $65D2; NAME "inverseLCFlagsWithOtherUnusedFlagsAndPreviousFourthMmio"; SIZE 10; COMMENT "for first value:\n; bit 0 might be another way to mute?\n; bit 1 used to skip setting pitch hi\n; bits 4/5 are inverses of length counter halt/constant volume for the respective channel"; };
LABEL { ADDR $65DC; NAME "audioTmp"; };
LABEL { ADDR $65E3; NAME "audioStartDelay"; };
LABEL { ADDR $2000; NAME "PpuControl_2000"; COMMENT "7  bit  0\n; ---- ----\n; VPHB SINN\n; |||| ||||\n; |||| ||++- Base nametable address\n; |||| ||    (0 = $2000; 1 = $2400; 2 = $2800; 3 = $2C00)\n; |||| |+--- VRAM address increment per CPU read/write of PPUDATA\n; |||| |     (0: add 1, going across; 1: add 32, going down)\n; |||| +---- Sprite pattern table address for 8x8 sprites\n; ||||       (0: $0000; 1: $1000; ignored in 8x16 mode)\n; |||+------ Background pattern table address (0: $0000; 1: $1000)\n; ||+------- Sprite size (0: 8x8; 1: 8x16)\n; |+-------- PPU master/slave select\n; |          (0: read backdrop from EXT pins; 1: output color on EXT pins)\n; +--------- Generate an NMI at the start of the\n;            vertical blanking interval (0: off; 1: on)"; };
LABEL { ADDR $2001; NAME "PpuMask_2001"; COMMENT "7  bit  0\n; ---- ----\n; BGRs bMmG\n; |||| ||||\n; |||| |||+- Display type: (0: color, 1: grayscale)\n; |||| ||+-- 1: Show background in leftmost 8 pixels of screen, 0: Hide\n; |||| |+--- 1: Show sprites in leftmost 8 pixels of screen, 0: Hide\n; |||| +---- 1: Show background\n; |||+------ 1: Show sprites\n; ||+------- Emphasize red\n; |+-------- Emphasize green\n; +--------- Emphasize blue"; };
LABEL { ADDR $2002; NAME "PpuStatus_2002"; COMMENT "7  bit  0\n; ---- ----\n; VSO. ....\n; |||| ||||\n; |||+-++++- Least significant bits previously written into a PPU register\n; |||        (due to register not being updated for this address)\n; ||+------- Sprite overflow. The intent was for this flag to be set\n; ||         whenever more than eight sprites appear on a scanline, but a\n; ||         hardware bug causes the actual behavior to be more complicated\n; ||         and generate false positives as well as false negatives; see\n; ||         PPU sprite evaluation. This flag is set during sprite\n; ||         evaluation and cleared at dot 1 (the second dot) of the\n; ||         pre-render line.\n; |+-------- Sprite 0 Hit.  Set when a nonzero pixel of sprite 0 overlaps\n; |          a nonzero background pixel; cleared at dot 1 of the pre-render\n; |          line.  Used for raster timing.\n; +--------- Vertical blank has started (0: not in vblank; 1: in vblank).\n;            Set at dot 1 of line 241 (the line *after* the post-render\n;            line, false); cleared after reading $2002 and at dot 1 of the\n;            pre-render line."; };
LABEL { ADDR $2003; NAME "OamAddr_2003"; COMMENT "Set OAM address - Write only"; };
LABEL { ADDR $2004; NAME "OamData_2004"; COMMENT "Read/Write OAM data"; };
LABEL { ADDR $2005; NAME "PpuScroll_2005"; COMMENT "Set PPU scroll, write twice - Write only"; };
LABEL { ADDR $2006; NAME "PpuAddr_2006"; COMMENT "Set PPU address, write twice - Write only"; };
LABEL { ADDR $2007; NAME "PpuData_2007"; COMMENT "Read/Write VRAM"; };
LABEL { ADDR $4000; NAME "Sq0Duty_4000"; COMMENT "DDLC VVVV\n; Duty (D), envelope loop / length counter halt (L), constant volume (C), volume/envelope (V)"; };
LABEL { ADDR $4001; NAME "Sq0Sweep_4001"; COMMENT "EPPP NSSS\n; Sweep unit: enabled (E), period (P), negate (N), shift (S)"; };
LABEL { ADDR $4002; NAME "Sq0Timer_4002"; COMMENT "TTTT TTTT\n; Timer low (T)"; };
LABEL { ADDR $4003; NAME "Sq0Length_4003"; COMMENT "LLLL LTTT\n; Length counter load (L), timer high (T)"; };
LABEL { ADDR $4004; NAME "Sq1Duty_4004"; COMMENT "DDLC VVVV\n; Duty (D), envelope loop / length counter halt (L), constant volume (C), volume/envelope (V)"; };
LABEL { ADDR $4005; NAME "Sq1Sweep_4005"; COMMENT "EPPP NSSS\n; Sweep unit: enabled (E), period (P), negate (N), shift (S)"; };
LABEL { ADDR $4006; NAME "Sq1Timer_4006"; COMMENT "TTTT TTTT\n; Timer low (T)"; };
LABEL { ADDR $4007; NAME "Sq1Length_4007"; COMMENT "LLLL LTTT\n; Length counter load (L), timer high (T)"; };
LABEL { ADDR $4008; NAME "TrgLinear_4008"; COMMENT "CRRR RRRR\n; Length counter halt / linear counter control (C), linear counter load (R)"; };
LABEL { ADDR $400A; NAME "TrgTimer_400A"; COMMENT "TTTT TTTT\n; Timer low (T)"; };
LABEL { ADDR $400B; NAME "TrgLength_400B"; COMMENT "LLLL LTTT\n; Length counter load (L), timer high (T)"; };
LABEL { ADDR $400C; NAME "NoiseVolume_400C"; COMMENT "--LC VVVV\n; Envelope loop / length counter halt (L), constant volume (C), volume/envelope (V)"; };
LABEL { ADDR $400E; NAME "NoisePeriod_400E"; COMMENT "L--- PPPP\n; Loop noise (L), noise period (P)"; };
LABEL { ADDR $400F; NAME "NoiseLength_400F"; COMMENT "LLLL L---\n; Length counter load (L)"; };
LABEL { ADDR $4010; NAME "DmcFreq_4010"; COMMENT "IL-- RRRR\n; IRQ enable (I), loop (L), frequency (R)"; };
LABEL { ADDR $4011; NAME "DmcCounter_4011"; COMMENT "-DDD DDDD\n; Load counter (D)"; };
LABEL { ADDR $4012; NAME "DmcAddress_4012"; COMMENT "AAAA AAAA\n; Sample address (A)"; };
LABEL { ADDR $4013; NAME "DmcLength_4013"; COMMENT "LLLL LLLL\n; Sample length (L)"; };
LABEL { ADDR $4014; NAME "SpriteDma_4014"; COMMENT "Writing $XX will upload 256 bytes of data from CPU page $XX00-$XXFF to the internal PPU OAM."; };
LABEL { ADDR $4015; NAME "ApuStatus_4015"; COMMENT "Read:\n; IF-D NT21\n; DMC interrupt (I), frame interrupt (F), DMC active (D), length counter > 0 (N/T/2/1)\n; \n; Write:\n; ---D NT21\n; Enable DMC (D), noise (N), triangle (T), and pulse channels (2/1)"; };
LABEL { ADDR $4016; NAME "Ctrl1_4016"; COMMENT "Read (NES - input):\n; ---4 3210\n; Read data from controller port #1.\n; \n; Write:\n; ---- ---A\n; Output data (strobe) to both controllers."; };
LABEL { ADDR $4017; NAME "Ctrl2_FrameCtr_4017"; COMMENT "Read (NES - input):\n; ---4 3210\n; Read data from controller port #2.\n; \n; Write (Frame counter): MI-- ----\n; Mode (M, 0 = 4-step, 1 = 5-step), IRQ inhibit flag (I)"; };